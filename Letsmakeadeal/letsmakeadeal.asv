function letsmakeadeal(min_doors, max_doors, trials)
% Lets Make a Deal (N pintu)
% Pemakaian (opsional): lets make a de(3, 15, 5e4)

    % ---------- Parameter default ----------
    if nargin < 1, min_doors = 3;   end
    if nargin < 2, max_doors = 15;  end
    if nargin < 3, trials    = 5e4; end

    doors = min_doors:max_doors;
    K     = numel(doors);

    stay_sim   = zeros(1, K);
    switch_sim = zeros(1, K);
    stay_theo  = 1 ./ doors;               % P(stay)   = 1/N
    switch_theo= (doors - 1) ./ doors;     % P(switch) = (N-1)/N

    fprintf('Monty Hall — %d sampai %d pintu, %d percobaan per N\n', ...
            min_doors, max_doors, trials);
    fprintf('Doors |  Stay (sim/th)  |  Switch (sim/th)  |  Ratio(sw/st)\n');
    fprintf('----- | ---------------- | ----------------- | --------------\n');

    for i = 1:K
        N = doors(i);
        [s_stay, s_switch] = simulate_once(N, trials);
        stay_sim(i)   = s_stay;
        switch_sim(i) = s_switch;

        fprintf('%4d  |   %.3f / %.3f   |    %.3f / %.3f   |    %.2f\n', ...
            N, s_stay, stay_theo(i), s_switch, switch_theo(i), s_switch / max(s_stay, eps));
    end

    % ---------- Plot ----------
    figure('Name','Monty Hall','Color','w','Position',[100 100 900 520]);
    hold on; grid on; box on;
    plot(doors, stay_sim*100,   'o-','LineWidth',1.8,'MarkerSize',6);
    plot(doors, switch_sim*100, 'o-','LineWidth',1.8,'MarkerSize',6);
    plot(doors, stay_theo*100,  '--','LineWidth',1.5);
    plot(doors, switch_theo*100,'--','LineWidth',1.5);
    ylim([0 100]);
    xlabel('Jumlah Pintu (N)');
    ylabel('Peluang Menang (%)');
    title('Monty Hall: Simulasi vs. Teori');
    legend({'Stay (sim)','Switch (sim)','Stay (teori)','Switch (teori)'}, ...
           'Location','best');
end

% ====== Fungsi bantu ======
function [stay_rate, switch_rate] = simulate_once(N, T)
% Simulasi sederhana:
% - Pilih pintu hadiah (prize) acak
% - Pilih tebakan awal acak
% - Jika tebakan awal = prize → stay menang; kalau tidak → switch menang

    prize  = randi(N, T, 1);
    guess  = randi(N, T, 1);

    stay_wins   = (guess == prize);      % benar sejak awal
    switch_wins = ~stay_wins;            % salah sejak awal → switch menang

    stay_rate   = mean(stay_wins);
    switch_rate = mean(switch_wins);
end
